apiVersion: v1
kind: Namespace
metadata:
  name: web-scan
  labels:
    name: web-scan
    environment: production

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-scan-api
  namespace: web-scan
  labels:
    app: web-scan-api
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: web-scan-api
  template:
    metadata:
      labels:
        app: web-scan-api
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: web-scan-api
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: web-scan-api
        image: ghcr.io/your-org/web-scan:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3001
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3001"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: web-scan-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: web-scan-secrets
              key: redis-url
        - name: LOG_LEVEL
          value: "info"
        - name: PLATFORM
          value: "kubernetes"
        - name: DISABLE_CACHE
          value: "false"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: data
          mountPath: /app/data
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: logs
        emptyDir: {}
      - name: data
        persistentVolumeClaim:
          claimName: web-scan-data
      - name: config
        configMap:
          name: web-scan-config
      imagePullSecrets:
      - name: ghcr-secret

---
apiVersion: v1
kind: Service
metadata:
  name: web-scan-api-service
  namespace: web-scan
  labels:
    app: web-scan-api
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  - port: 443
    targetPort: http
    protocol: TCP
    name: https
  selector:
    app: web-scan-api

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: web-scan-api
  namespace: web-scan
  labels:
    app: web-scan-api

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: web-scan-config
  namespace: web-scan
data:
  app.properties: |
    # Web-Scan API Configuration
    api.version=2.0.0
    api.environment=production
    
    # Rate Limiting
    rate.limit.general=100
    rate.limit.ai=20
    rate.limit.security=50
    rate.limit.network=30
    
    # Cache Configuration
    cache.ttl.dns=3600
    cache.ttl.ssl=21600
    cache.ttl.ai=7200
    
    # Security
    security.headers.enabled=true
    security.cors.enabled=true
    
    # Monitoring
    monitoring.enabled=true
    monitoring.metrics.enabled=true
    monitoring.health.enabled=true

---
apiVersion: v1
kind: Secret
metadata:
  name: web-scan-secrets
  namespace: web-scan
type: Opaque
data:
  # Base64 encoded values (replace with actual values)
  database-url: cG9zdGdyZXNxbDovL3VzZXI6cGFzc0BkYi5leGFtcGxlLmNvbS9kYg==
  redis-url: cmVkaXM6Ly9yZWRpcy5leGFtcGxlLmNvbTo2Mzc5

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: web-scan-data
  namespace: web-scan
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp2

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: web-scan-ingress
  namespace: web-scan
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - api.web-scan.com
    secretName: web-scan-tls
  rules:
  - host: api.web-scan.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: web-scan-api-service
            port:
              number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: web-scan-api-hpa
  namespace: web-scan
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: web-scan-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: web-scan-api-pdb
  namespace: web-scan
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: web-scan-api
